@page "/transaction"

@using RothschildHouse.Library.Common.Clients;
@using RothschildHouse.Library.Common.Clients.Models.Common;
@using RothschildHouse.Library.Common.Clients.Models.PaymentGateway;
@using System.Globalization;

@inject PaymentGatewayClient rothschildHouseClient

<PageTitle>Transactions</PageTitle>

<h1>Transactions</h1>

<MudGrid>
    <MudItem xs="12">
        <MudSelect T="int" Label="Page size" @bind-value="@PageSize">
            <MudSelectItem Value="25" />
            <MudSelectItem Value="50" />
            <MudSelectItem Value="100" />
        </MudSelect>
    </MudItem>
    <MudItem xs="12">
        <MudSelect T="short?" Label="Status" @bind-value="@TransactionStatusId">
            <MudSelectItem Value="default(short?)"></MudSelectItem>
            @if (viewBag != null)
            {
                @foreach (var item in viewBag?.TransactionStatuses)
                {
                    <MudSelectItem Value="@item.Id">@item.Name</MudSelectItem>
                }
            }
        </MudSelect>
        <MudSelect T="Guid?" Label="Client application" @bind-value="@ClientApplicationId">
            <MudSelectItem Value="default(Guid?)"></MudSelectItem>
            @if (viewBag != null)
            {
                @foreach (var item in viewBag?.ClientApplications)
                {
                    <MudSelectItem Value="@item.Id">@item.Name</MudSelectItem>
                }
            }
        </MudSelect>
    </MudItem>
    <MudItem xs="6">
        <MudDatePicker Label="Start date" @bind-Date="StartDate" />
    </MudItem>
    <MudItem xs="6">
        <MudDatePicker Label="End date" @bind-Date="EndDate" />
    </MudItem>
    <MudItem xs="12">
        <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Search" @onclick="SearchAsync" />
    </MudItem>
</MudGrid>

<br />

@if (response == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <MudGrid>
        <MudItem xs="12">
            <MudText Typo="Typo.body1">Page size: <strong>@(response.PageSize)</strong>, Total of items: <strong>@(response.ItemsCount)</strong>.</MudText>
        </MudItem>

        <MudItem xs="12">
            <MudPagination Color="Color.Primary" Count="@((int)response.PageCount)" SelectedChanged="PageChangedAsync" />
        </MudItem>

        <MudItem xs="12">
            <MudDataGrid Items="@response.Model">
                <Columns>
                    <PropertyColumn Property="x => x.Id" Title="ID" />
                    <PropertyColumn Property="x => x.TransactionType" Title="Type" />
                    <PropertyColumn Property="x => x.TransactionStatus" Title="Status" />
                    <PropertyColumn Property="x => x.ClientApplication" Title="Client Application" />
                    <PropertyColumn Property="x => x.OrderTotal" Title="Order Total" />
                    <PropertyColumn Property="x => x.Currency" Title="Currency" />
                    <PropertyColumn Property="x => x.CreationDateTime" Title="Created on" />
                    <TemplateColumn CellClass="d-flex justify-end">
                        <CellTemplate>
                            <MudStack Row>
                                <MudLink Href="@($"/transaction/{context.Item.Id}")">Details</MudLink>
                            </MudStack>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
            </MudDataGrid>
        </MudItem>
    </MudGrid>
}

@code {
    int PageSize { get; set; }
    short? TransactionStatusId { get; set; }
    Guid? ClientApplicationId { get; set; }
    DateTime? StartDate { get; set; }
    DateTime? EndDate { get; set; }

    GetTransactionsViewBagRespose viewBag;
    PagedResponse<TransactionItemModel> response;

    protected override async Task OnInitializedAsync()
    {
        PageSize = 25;

        var now = DateTime.Now;

        StartDate = new(now.Year, now.Month, now.Day);
        EndDate = new(now.Year, now.Month, now.Day);

        viewBag = await rothschildHouseClient.GetTransactionsViewBag();

        await SearchAsync();
    }

    private async Task SearchAsync()
    {
        response = await rothschildHouseClient.GetTransactionsAsync(new GetTransactionsRequest(TransactionStatusId, ClientApplicationId, StartDate, EndDate)
        {
            PageSize = PageSize
        });
    }

    private async Task PageChangedAsync(int i)
    {
        response = await rothschildHouseClient.GetTransactionsAsync(new GetTransactionsRequest(TransactionStatusId, ClientApplicationId, StartDate, EndDate)
        {
            PageSize = PageSize,
            PageNumber = i
        });
    }
}
